@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" LOGIC_COLOR
participant "MultipleEventsParser" LOGIC_COLOR
participant ":DeleteMultipleModulesCommand" LOGIC_COLOR
participant ":DeleteModuleCommand" LOGIC_COLOR
participant "r:CommandResult" LOGIC_COLOR
endbox

box Model MODEL_COLOR_T1
participant "m:Model" MODEL_COLOR
end box

activate ":LogicManager"

":LogicManager" -> ":DeleteMultipleModulesCommand": execute(Model m)
activate ":DeleteMultipleModulesCommand"

loop for each module specified
    create ":DeleteModuleCommand"

    ":DeleteMultipleModulesCommand" -> ":DeleteModuleCommand"
    activate ":DeleteModuleCommand"

    ":DeleteMultipleModulesCommand" <-- ":DeleteModuleCommand"
    deactivate ":DeleteModuleCommand"

    ":DeleteMultipleModulesCommand" -> ":DeleteModuleCommand": execute(Model m)
    activate ":DeleteModuleCommand"

    ":DeleteModuleCommand" -> "m:Model" : hasModule()
    activate "m:Model"

    ":DeleteModuleCommand" <-- "m:Model": true
    deactivate "m:Model"

    ":DeleteModuleCommand" -> "m:Model": deleteModule()
    activate "m:Model"

    ":DeleteModuleCommand" <-- "m:Model"
    deactivate "m:Model"

    ":DeleteMultipleModulesCommand" <-- ":DeleteModuleCommand"
    deactivate ":DeleteModuleCommand"
end

":DeleteMultipleModulesCommand" -> "MultipleEventsParser": convertArrayList\nToString(ArrayList)
activate "MultipleEventsParser"

":DeleteMultipleModulesCommand" <-- "MultipleEventsParser"
deactivate "MultipleEventsParser"

create "r:CommandResult"
":DeleteMultipleModulesCommand" -> "r:CommandResult"
activate "r:CommandResult"

":DeleteMultipleModulesCommand" <-- "r:CommandResult": r
deactivate "r:CommandResult"

":LogicManager" <-- ":DeleteMultipleModulesCommand": r
deactivate ":DeleteMultipleModulesCommand"

<-- ":LogicManager"
deactivate ":LogicManager"

@enduml
