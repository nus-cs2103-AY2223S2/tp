package seedu.task.logic.commands;

import static seedu.task.logic.parser.CliSyntax.PREFIX_DATE;
import static seedu.task.logic.parser.CliSyntax.PREFIX_EFFORT;

import java.time.LocalDate;
import java.util.Objects;

import seedu.task.logic.commands.exceptions.CommandException;
import seedu.task.model.Model;
import seedu.task.model.task.Effort;

/**
 * Gets schedule for a date specified by user (limited to 30 days from when schedule was created).
 * Schedule is generated by the plan command (only when initiated by users).
 */
public class ScheduleCommand extends Command {
    public static final String COMMAND_WORD = "schedule";

    public static final String MESSAGE_USAGE = COMMAND_WORD + ": returns a day's work plan\n"
            + "Parameters: "
            + PREFIX_DATE + "DATE "
            + PREFIX_EFFORT + "EFFORT\n"
            + "Example: " + COMMAND_WORD + " D/2023-04-26" + " E/5";

    public static final String SCHEDULE_SUCCESS_MESSAGE = "Daily Plan Displayed.";
    public static final String OUT_OF_RANGE_MESSAGE =
            "Date entered is outside of planner date range (30 days from date generated).\n"
            + "Try re-planning with 'E/' flag, or entering another date.";
    private final LocalDate date;
    private final Effort effort;

    /**
     * Creates a new ScheduleCommand with empty effort
     */
    public ScheduleCommand(LocalDate date) {
        this.date = date;
        this.effort = null;
    }

    /**
     * Creates a new {@code ScheduleCommand} with effort field
     */
    public ScheduleCommand(LocalDate date, Effort effort) {
        this.date = date;
        this.effort = effort;
    }

    @Override
    public CommandResult execute(Model model) throws CommandException {
        if (effort == null) {
            model.schedule(date);
            return new CommandResult(SCHEDULE_SUCCESS_MESSAGE);
        } else {
            CommandResult cmdRes = new PlanCommand(effort).execute(model);
            model.schedule(date);
            return new CommandResult(cmdRes, SCHEDULE_SUCCESS_MESSAGE);
        }
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        } else if (other instanceof ScheduleCommand) {
            ScheduleCommand sd = (ScheduleCommand) other;
            if (Objects.isNull(sd.effort) || Objects.isNull(effort)) {
                return date.equals(sd.date);
            } else {
                return date.equals(sd.date) && effort.equals(sd.effort);
            }
        } else {
            return false;
        }
    }
}
