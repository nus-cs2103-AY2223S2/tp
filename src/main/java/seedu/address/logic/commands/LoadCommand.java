package seedu.address.logic.commands;

import static java.util.Objects.requireNonNull;

import java.io.File;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.Objects;
import java.util.Optional;

import seedu.address.commons.exceptions.DataConversionException;
import seedu.address.logic.commands.exceptions.CommandException;
import seedu.address.model.Model;
import seedu.address.model.ReadOnlyAddressBook;
import seedu.address.storage.JsonAddressBookStorage;

/**
 * Chooses and loads the contents of another data file into ModCheck.
 */
public class LoadCommand extends Command {
    public static final String COMMAND_WORD = "load";

    public static final String MESSAGE_SUCCESS = "Contents of %1$s loaded successfully!";
    public static final String MESSAGE_NO_FILE_SELECTED = "No data file has been selected!";
    public static final String MESSAGE_NOT_MODCHECK_READABLE_FILE = "Data file cannot be read by ModCheck!\n"
            + "Please only load data files generated by ModCheck.";
    public static final String MESSAGE_ADDRESS_BOOK_EMPTY = "Address book chosen is empty!";
    public static final String MESSAGE_NOT_VALID_PATH = "Path entered is not valid!";
    private final String path;

    public LoadCommand(String path) {
        this.path = path;
    }

    @Override
    public CommandResult execute(Model model) throws CommandException {
        requireNonNull(model);

        if (path == null) {
            throw new CommandException(MESSAGE_NO_FILE_SELECTED);
        }

        Optional<ReadOnlyAddressBook> newAddressBook;
        try {
            newAddressBook = readFile(path);
        } catch (InvalidPathException e) {
            throw new CommandException(MESSAGE_NOT_VALID_PATH);
        } catch (DataConversionException e) {
            throw new CommandException(MESSAGE_NOT_MODCHECK_READABLE_FILE);
        }

        model.combine(newAddressBook.orElseThrow(() -> new CommandException(MESSAGE_ADDRESS_BOOK_EMPTY)),
                path);

        return new CommandResult(String.format(MESSAGE_SUCCESS, path));
    }

    private Optional<ReadOnlyAddressBook> readFile(String path) throws DataConversionException, InvalidPathException {
        if (!new File(path).canRead()) {
            throw new InvalidPathException(path, "File not readable");
        }
        Optional<ReadOnlyAddressBook> newAddressBook = new JsonAddressBookStorage(Path.of(path)).readAddressBook();
        return newAddressBook;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        LoadCommand that = (LoadCommand) o;

        return Objects.equals(path, that.path);
    }

    @Override
    public int hashCode() {
        return path != null ? path.hashCode() : 0;
    }
}
